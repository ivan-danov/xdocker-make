#!/bin/bash

#*******************************************************************************
#*                                 xdocker-make                                *
#*-----------------------------------------------------------------------------*
#*                                                                             *
#* Copyright (c) 2022 Ivan Danov                                               *
#*                                                                             *
#* MIT License                                                                 *
#*                                                                             *
#* Permission is hereby granted, free of charge, to any person obtaining a     *
#* copy of this software and associated documentation files (the "Software"),  *
#* to deal in the Software without restriction, including without limitation   *
#* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
#* and/or sell copies of the Software, and to permit persons to whom the       *
#* Software is furnished to do so, subject to the following conditions:        *
#*                                                                             *
#* The above copyright notice and this permission notice shall be included     *
#* in all copies or substantial portions of the Software.                      *
#*                                                                             *
#* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS     *
#* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, *
#* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
#* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
#* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
#* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
#* DEALINGS IN THE SOFTWARE.                                                   *
#*******************************************************************************

set -Eeuo pipefail

SCRIPT_SELF="$(realpath "${BASH_SOURCE[0]}")"
# shellcheck disable=SC2034 # appears unused
SCRIPT_DIR=$(dirname "${SCRIPT_SELF}")
SCRIPT_FILE=$(basename "${SCRIPT_SELF}")
# shellcheck disable=SC2034 # appears unused
SCRIPT_NAME=$(basename -s .bash "$(basename -s .sh "${SCRIPT_FILE}")")

# shellcheck disable=SC2034
XDOCKER_MAKE_BASE_VERSION="1.0"
XDOCKER_MAKE_VERSION=development

function log() {
	echo >&2 -e "[$(date +"%Y-%m-%d %H:%M:%S")] ${1-}"
}
function die() {
	local msg=$1
	local code=${2-1} # Bash parameter expansion - default exit status 1. See https://wiki.bash-hackers.org/syntax/pe#use_a_default_value
	log "$msg"
	if [ "$code" -ne 0 ]; then
		log "💥 Error!"
	fi
	exit "$code"
}
ifIsSet() {
	[[ ${!1-x} == x ]] && return 1 || return 0
}
ifNotSet() {
	[[ ${!1-x} == x ]] && return 0 || return 1
}

argc=$#
if [ ${argc} -ne 1 ]; then
	echo "Usage:"
	echo "	${0} <config file, see /usr/share/doc/xdocker-create/examples/>"
	exit 1
fi

if ifNotSet OUTPUT_DIR ; then
OUTPUT_DIR=.
fi

CONFIG_FILE=${1}

# shellcheck source=/dev/null
source "${CONFIG_FILE}"

# check required params and arguments
ifNotSet OS_DISTRO && die "💥 OS_DISTRO was not defined."
ifNotSet IMAGE_TYPE && die "💥 IMAGE_TYPE was not defined."
ifNotSet CONTAINER_NAME && die "💥 CONTAINER_NAME was not defined."
ifNotSet CONTAINER_VERSION && die "💥 CONTAINER_VERSION was not defined."
ifNotSet MAINTAINER && die "💥 MAINTAINER was not defined."
ifNotSet DEB_PACKAGES && die "💥 DEB_PACKAGES was not defined."

function cleanup() {
	exit_code=$?
	trap - SIGINT SIGTERM ERR EXIT

	[[ $(type -t xdocker_conf_cleanup) == function ]] && xdocker_conf_cleanup

	if [ -d "${tmpdir}" ]; then
		rm -rf "$tmpdir"
		log "🚽 Deleted temporary working directory $tmpdir"
	fi

	log "🚽 cleanup"
	if [ $exit_code -ne 0 ]; then
		log "💥 Error!"
	fi
}

trap cleanup SIGINT SIGTERM ERR EXIT

log "👶 Starting up..."

tmpdir=$(mktemp -d -p ${OUTPUT_DIR})
if [[ ! "$tmpdir" || ! -d "$tmpdir" ]]; then
	die "💥 Could not create temporary working directory."
else
	log "📁 Created temporary working directory $tmpdir"
fi

if [ "${XDOCKER_MAKE_VERSION}" == "development" ]; then
	XDOCKER_IMAGE_CREATE="${SCRIPT_DIR}/xdocker-image-create.bash"
	XDOCKER_BUILD_PROJECT="${SCRIPT_DIR}/xdocker-build-project.bash"
else
	XDOCKER_IMAGE_CREATE=/usr/lib/xdocker-make/xdocker-image-create.bash
	XDOCKER_BUILD_PROJECT=/usr/lib/xdocker-make/xdocker-build-project.bash
fi

cp ${XDOCKER_IMAGE_CREATE} "$tmpdir/xdocker-image-create.bash"
cp ${XDOCKER_BUILD_PROJECT} "$tmpdir/xdocker-build-project.bash"

[[ $(type -t xdocker_make_config) == function ]] && xdocker_make_config "$tmpdir"

cat > "$tmpdir/Dockerfile" << EOF
FROM ${DOCKER_FROM}

MAINTAINER ${MAINTAINER}

ENV OS_NAME=${OS_NAME}
ENV OS_DISTRO=${OS_DISTRO}
ENV IMAGE_TYPE=${IMAGE_TYPE}
ENV CONTAINER_NAME=${CONTAINER_NAME}
ENV CONTAINER_VERSION=${CONTAINER_VERSION}
ENV DEBIAN_FRONTEND=noninteractive
ENV OLD_RELEASE_REPO=${OLD_RELEASE_REPO}
ENV DEB_PACKAGES="${DEB_PACKAGES:=}"
ENV DEB_PACKAGES0="${DEB_PACKAGES0:=}"
ENV TIMEZONE_PATH="${TIMEZONE_PATH}"

LABEL IMAGE_TYPE=${IMAGE_TYPE}
LABEL OS_DISTRO=${OS_DISTRO}
LABEL CONTAINER_NAME=${CONTAINER_NAME}
LABEL CONTAINER_VERSION=${CONTAINER_VERSION}

# extra tags from config
${DOCKERFILE_TAGS:=}

# copy setup script
COPY ./xdocker-image-create.bash /
COPY ./xdocker-build-project.bash /

# run setup script
RUN bash /xdocker-image-create.bash

ENTRYPOINT ["/bin/bash"]

EOF

log "🔧 Create docker image"
${SUDO:=} docker build "$tmpdir" --file "$tmpdir/Dockerfile" \
	--tag "${CONTAINER_NAME}:${CONTAINER_TAG}" \
	--tag "${CONTAINER_NAME}:latest"

die "✅ Completed." 0
